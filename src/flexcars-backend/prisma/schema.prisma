// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MANAGER
  CUSTOMER
  CARSITTER
}

enum CompanyType {
  DEALERSHIP
  RENTAL_AGENCY
  BUSINESS
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum VehicleStatus {
  AVAILABLE
  RESERVED
  RENTED
  MAINTENANCE
  INCIDENT
}

enum MaintenanceType {
  OIL_CHANGE
  INSPECTION
  REPAIR
}

enum MaintenanceStatus {
  PENDING
  DONE
  OVERDUE
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum DocumentType {
  ID_CARD
  DRIVER_LICENSE
  PROOF_OF_ADDRESS
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum DurationType {
  HOURLY
  DAILY
  WEEKLY
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
}

enum IncidentStatus {
  OPEN
  RESOLVED
  IN_REVIEW
}

enum Availability {
  AVAILABLE
  BUSY
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}


enum AlertType {
  UPCOMING
  OVERDUE
  MILEAGE
}

enum Location {
  PARIS_11
  PARIS_19
  ISSY_LES_MOULINEAUX
  BOULOGNE
  SAINT_DENIS
}


enum PricingType {
  RENTAL
  ACCIDENT
  LATER_PENALTY
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String?   
  firstName    String
  lastName     String
  phoneNumber  String?
  birthDate    DateTime?
  avatar       String?
  emailConfirmed       Boolean  @default(false)
  emailConfirmToken    String?
  emailConfirmExpires  DateTime?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  passwordLastReset       DateTime @default(now())
  failedLoginAttempts Int      @default(0)
  lockUntil           DateTime?
  provider            String? 
  providerId          String?
  role         Role     @default(USER)
  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id])
  createdAt    DateTime @default(now())
  Token        Token?
  reservations Reservation[]
  documents    Document[]
  carSitter    CarSitter?
  notifications Notification[]
  vehicleRecommendations VehicleRecommendation[]
  signedContractsAsCustomer RentalContract[] @relation("user")
  signedContractsAsAgent RentalContract[] @relation("signedByAgent")
  Incident Incident[]
}

model Company {
  id         String      @id @default(uuid())
  name       String
  type       CompanyType
  address    String
  vatNumber  String
  logoUrl    String
  createdAt  DateTime    @default(now())
  users      User[]
  vehicles   Vehicle[]
}

model Vehicle {
  id             String           @id @default(uuid())
  companyId      String
  company        Company?          @relation(fields: [companyId], references: [id])
  brand          String?
  model          String?
  year           Int?
  plateNumber    String?
  fuelType       FuelType?
  currentMileage Int?
  gpsEnabled     Boolean?
  status         VehicleStatus?
  locationLat    Float?
  locationLng    Float?
  imageUrl       String?
  createdAt      DateTime         @default(now())
  maintenances   VehicleMaintenance[]
  reservations   Reservation[]
  incidents      Incident[]
  recommendations VehicleRecommendation[]
  PricingRule PricingRule[]
  CarSitter CarSitter[]
  MaintenanceAlert MaintenanceAlert[]
}

model VehicleMaintenance {
  id             String           @id @default(uuid())
  vehicleId      String
  vehicle        Vehicle?          @relation(fields: [vehicleId], references: [id])
  type           MaintenanceType?
  scheduledDate  DateTime?
  mileageTrigger  Int?
  recurring       Boolean?           
  completedDate  DateTime?
  status         MaintenanceStatus  @default(PENDING)
  notes          String?
  MaintenanceAlert MaintenanceAlert[]
}


model MaintenanceAlert {
  id              String             @id @default(uuid())
  vehicleId       String
  vehicle         Vehicle?            @relation(fields: [vehicleId], references: [id])
  maintenanceId   String
  maintenance     VehicleMaintenance? @relation(fields: [maintenanceId], references: [id])
  alertDate       DateTime
  alertType       AlertType          @default(UPCOMING)       
  message         String
  resolved        Boolean            @default(false)
  createdAt       DateTime           @default(now())
}


model Reservation {
  id             String           @id @default(uuid())
  vehicleId      String
  vehicle        Vehicle?          @relation(fields: [vehicleId], references: [id])
  customerId     String
  customer       User?             @relation(fields: [customerId], references: [id])
  startDatetime  DateTime?
  endDatetime    DateTime?
  pickupLocation Location?           @default(SAINT_DENIS)
  dropoffLocation Location?          @default(ISSY_LES_MOULINEAUX)
  carSittingOption Boolean          @default(false)
  status         ReservationStatus @default(PENDING)
  totalPrice     Float?
  createdAt      DateTime         @default(now())
  rentalContract RentalContract?
  services       ReservationService[]
  invoices       Invoice[]
  Incident Incident[]
  dropoffRequests DropoffRequest[]
}

model RentalContract {
  id                String           @id @default(uuid())
  reservationId     String           @unique
  reservation       Reservation?     @relation(fields: [reservationId], references: [id])
  pdfUrl            String?
  signedByCustomerId String
  signedByCustomer  User?            @relation("user", fields: [signedByCustomerId], references: [id])
  signedByAgentId   String
  signedByAgent     User?            @relation("signedByAgent", fields: [signedByAgentId], references: [id])
  signedAt          DateTime         @default(now())
}

model Document {
  id          String       @id @default(uuid())
  userId      String
  user        User?         @relation(fields: [userId], references: [id])
  type        DocumentType?
  fileUrl     String?
  verified    Boolean      @default(false)
  uploadedAt  DateTime     @default(now())
}

model Invoice {
  id             String           @id @default(uuid())
  reservationId  String?
  reservation    Reservation?     @relation(fields: [reservationId], references: [id])
  invoiceNumber  String?
  amount         Float?
  dueDate        DateTime         @default(now())
  paidAt         DateTime?        @default(now())
  status         InvoiceStatus    @default(UNPAID)
  penaltyAmount  Float?
  invoiceType    String?          @default("RESERVATION") // RESERVATION, LATE_FEES, PENALTY
  payments       Payment[]
}

model Payment {
  id             String           @id @default(uuid())
  invoiceId      String
  invoice        Invoice?          @relation(fields: [invoiceId], references: [id])
  method         PaymentMethod     @default(STRIPE)
  transactionId  String?
  paidAt         DateTime          @default(now())
  status         PaymentStatus?     @default(PENDING)
}

model RentalService {
  id             String           @id @default(uuid())
  name           String
  pricePerDay    Float
  reservationServices ReservationService[]
}

model ReservationService {
  id             String           @id @default(uuid())
  reservationId  String
  reservation    Reservation?      @relation(fields: [reservationId], references: [id])
  serviceId      String
  service        RentalService?    @relation(fields: [serviceId], references: [id])
}
model PricingRule {
  id             String           @id @default(uuid())
  vehicleId      String
  vehicle        Vehicle?          @relation(fields: [vehicleId], references: [id])
  durationType   DurationType      @default(HOURLY)
  basePrice      Float?
  dynamicMultiplier Float?
  type           PricingType?   @default(RENTAL)
  season         String?
}

model Incident {
  id             String           @id @default(uuid())
  vehicleId      String
  vehicle        Vehicle?          @relation(fields: [vehicleId], references: [id])
  reportedById   String
  reportedBy     User?             @relation(fields: [reportedById], references: [id])
  description    String?
  reservationId     String?
  location          String?
  reservation       Reservation?          @relation(fields: [reservationId], references: [id])
  severity       IncidentSeverity?
  photosUrl      String?
  status         IncidentStatus   @default(OPEN)
  reportedAt     DateTime         @default(now())
  resolvedAt     DateTime?
}

model CarSitter {
  id             String           @id @default(uuid())
  userId         String           @unique
  user           User?             @relation(fields: [userId], references: [id])
  assignedVehicleId String?
  assignedVehicle Vehicle?        @relation(fields: [assignedVehicleId], references: [id])
  currentLocationLat Float?
  currentLocationLng Float?
  availability   Availability     @default(BUSY)
  lastActiveAt   DateTime?
  dropoffRequests DropoffRequest[]
}

model Notification {
  id             String           @id @default(uuid())
  userId         String
  user           User?             @relation(fields: [userId], references: [id])
  type           NotificationType  @default(EMAIL)
  title          String?
  message        String?
  sentAt         DateTime           @default(now())
  isRead         Boolean            @default(false)
}

model VehicleRecommendation {
  id             String           @id @default(uuid())
  userId         String
  user           User?             @relation(fields: [userId], references: [id])
  recommendedVehicleId String
  recommendedVehicle Vehicle?       @relation(fields: [recommendedVehicleId], references: [id])
  score          Float?
  reason         String?
  createdAt      DateTime         @default(now())
}

model Token {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  type      TokenType
  createdAt DateTime  @default(now())
  usedAt    DateTime?
}

enum DropoffStatus {
  PENDING
  VALIDATED
  REJECTED
}

model DropoffRequest {
  id             String           @id @default(uuid())
  reservationId  String
  reservation    Reservation?     @relation(fields: [reservationId], references: [id])
  carSitterId    String?
  carSitter      CarSitter?       @relation(fields: [carSitterId], references: [id])
  currentMileage Int
  dropoffTime    DateTime
  hasAccident    Boolean          @default(false)
  locationLat    Float
  locationLng    Float
  signature      String?
  status         DropoffStatus    @default(PENDING)
  penaltyAmount  Float?           @default(0)
  penaltyInvoiceId String?
  carSitterNotes String?
  validatedAt    DateTime?
  createdAt      DateTime         @default(now())
}

enum TokenType {
  INVITATION
}
