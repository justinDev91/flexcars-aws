name: Deploy flexcars-backend to Amazon EKS with Rollback
on:
  push:
    branches:
      - main
    paths:
      - 'src/flexcars-backend/**'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches:
      - develop
    paths:
      - 'src/flexcars-backend/**'
      - '.github/workflows/deploy-backend.yml'
jobs:
  deploy:
    name: Deploy to flexcars-backend to EKS
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: eu-west-3
      EKS_CLUSTER_NAME: eks-cluster
      BACKEND_DEPLOYMENT_NAME: flexcars-backend
      BACKEND_APP_NAME: flexcars-backend
      DOCKER_IMAGE_NAME: flexcars-backend
      ECR_SECRET_NAME: backend-ecr-secret

    permissions:
      id-token: write 
      contents: read 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-runner-role
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          mask-aws-account-id: 'false'

      - name: Authenticate with AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
    
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -f src/${{ env.BACKEND_DEPLOYMENT_NAME }}/Dockerfile -t ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG src/${{ env.BACKEND_DEPLOYMENT_NAME }}
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update kubeconfig for EKS and create ECR secret
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}
          kubectl delete secret ${{ env.ECR_SECRET_NAME }} --ignore-not-found
          kubectl create secret docker-registry ${{ env.ECR_SECRET_NAME }} --docker-server=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})

      - name: Get Previous Image Tag (For Rollback)
        id: get-prev-image
        if: failure()
        run: |
          PREV_IMAGE=$(kubectl get deployment ${{ env.BACKEND_DEPLOYMENT_NAME }} -o=jsonpath='{.spec.template.spec.containers[0].image}')
          echo "PREV_IMAGE=$PREV_IMAGE" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        id: deploy
        run: |
          kubectl set image deployment/${{ env.BACKEND_DEPLOYMENT_NAME }} ${{ env.BACKEND_APP_NAME }}=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG
          kubectl rollout status deployment/${{ env.BACKEND_DEPLOYMENT_NAME }} || exit 1

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed! Rolling back to previous stable image..."
          kubectl set image deployment/${{ env.BACKEND_DEPLOYMENT_NAME }} ${{ env.BACKEND_APP_NAME }}=$PREV_IMAGE
          kubectl rollout status deployment/${{ env.BACKEND_DEPLOYMENT_NAME }} || exit 1
